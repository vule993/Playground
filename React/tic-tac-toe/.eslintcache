[{"D:\\Playground\\React\\tic-tac-toe\\src\\index.js":"1","D:\\Playground\\React\\tic-tac-toe\\src\\core.js":"2","D:\\Playground\\React\\tic-tac-toe\\src\\components\\ScoreBoard\\scoreBoard.js":"3","D:\\Playground\\React\\tic-tac-toe\\src\\components\\Board\\board.js":"4","D:\\Playground\\React\\tic-tac-toe\\src\\components\\Square\\square.js":"5"},{"size":4592,"mtime":1609705089817,"results":"6","hashOfConfig":"7"},{"size":1663,"mtime":1609705580250,"results":"8","hashOfConfig":"7"},{"size":552,"mtime":1607070700068,"results":"9","hashOfConfig":"7"},{"size":1213,"mtime":1609705559209,"results":"10","hashOfConfig":"7"},{"size":297,"mtime":1607070753495,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"107x853",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"D:\\Playground\\React\\tic-tac-toe\\src\\index.js",["24"],"//def\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n//css\r\nimport \"./index.css\";\r\n//img\r\nimport restart from \"./img/restart.png\";\r\nimport newGame from \"./img/add.png\";\r\nimport close from \"./img/close.png\";\r\n//mod\r\nimport Board from \"./components/Board/board\";\r\nimport Square from \"./components/Square/square\";\r\nimport ScoreBoard from \"./components/ScoreBoard/scoreBoard\";\r\nimport { checkNames, unNotify, notify } from \"./core\";\r\n\r\nconst initState = {\r\n  squares: Array(9).fill(null),\r\n  xIsNext: true,\r\n  winner: null,\r\n  gameStarted: false,\r\n  player1: \"\",\r\n  player2: \"\",\r\n  moves: 0,\r\n  winnerList: [],\r\n};\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = initState;\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.renderSquare = this.renderSquare.bind(this);\r\n\r\n    this.player1Input = React.createRef();\r\n    this.player2Input = React.createRef();\r\n    this.dialog = React.createRef();\r\n    this.textContainer = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!localStorage.getItem(\"winners\")) {\r\n      debugger\r\n      localStorage.setItem(\"winners\", \"\");\r\n    } else {\r\n      debugger\r\n      let winners = localStorage.getItem(\"winners\");\r\n      this.setState({\r\n        winnerList: winners && winners !== \"\" ? JSON.parse(winners) : [],\r\n      });\r\n    }\r\n  }\r\n\r\n  handleClick(i) {\r\n    //desctructuring\r\n    const { squares, xIsNext, moves, winner } = this.state\r\n    let updateState = {}\r\n    if (winner) {\r\n      return;\r\n    }\r\n\r\n    if (!squares[i]) {\r\n      squares[i] = xIsNext ? \"X\" : \"O\"\r\n      updateState = {xIsNext: !xIsNext}\r\n    }\r\n\r\n    this.setState({\r\n      ...updateState,\r\n      squares: squares,\r\n      moves: moves + 1,\r\n    });\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.state.squares[i]}\r\n        onClick={() => this.handleClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  restart() {\r\n    this.setState({\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n      winner: null,\r\n      moves: 0,\r\n    });\r\n  }\r\n\r\n  newGame() {\r\n    this.setState({\r\n      squares: Array(9).fill(null),\r\n      xIsNext: true,\r\n      winner: null,\r\n      gameStarted: false,\r\n      player1: \"\",\r\n      player2: \"\",\r\n      moves: 0,\r\n    });\r\n  }\r\n\r\n  startGame() {\r\n    let player1 = this.player1Input.current.value;\r\n    let player2 = this.player2Input.current.value;\r\n\r\n    if (!checkNames(player1, player2)) {\r\n      notify(\r\n        this.dialog,\r\n        this.textContainer,\r\n        \"You must type names for both players...\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      player1: player1,\r\n      player2: player2,\r\n      gameStarted: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {gameStarted, winnerList} = this.state\r\n    return (\r\n      <div id=\"wrapper\">\r\n        <div id=\"notification\" ref={this.dialog}>\r\n          <div className=\"message\">\r\n            <div className=\"header\">\r\n              <img\r\n                src={close}\r\n                onClick={() => unNotify(this.dialog, this.textContainer)}\r\n                alt=\"close icon\"\r\n              />\r\n            </div>\r\n            <div id=\"content\">\r\n              <div id=\"text\" ref={this.textContainer}></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"game\">\r\n          {!gameStarted && (\r\n            <div className=\"playerPrompt\">\r\n              <label>Player X</label>\r\n              <input\r\n                ref={this.player1Input}\r\n                placeholder=\"Enter player X name...\"\r\n              />\r\n              <label>Player Y</label>\r\n              <input\r\n                ref={this.player2Input}\r\n                placeholder=\"Enter player Y name...\"\r\n              />\r\n              <button onClick={this.startGame}>Start game</button>\r\n            </div>\r\n          )}\r\n          {gameStarted && (\r\n            <div className=\"game-board\">\r\n              <Board\r\n                boardState={this.state}\r\n                onClick={this.handleClick}\r\n                renderSquare={this.renderSquare}\r\n              />\r\n              <button onClick={() => this.restart()}>\r\n                <img src={restart} alt=\"\" />\r\n                Restart\r\n              </button>\r\n              <button onClick={() => this.newGame()}>\r\n                <img src={newGame} alt=\"\" />\r\n                New Game\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <ScoreBoard list={winnerList} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n","D:\\Playground\\React\\tic-tac-toe\\src\\core.js",[],"D:\\Playground\\React\\tic-tac-toe\\src\\components\\ScoreBoard\\scoreBoard.js",[],"D:\\Playground\\React\\tic-tac-toe\\src\\components\\Board\\board.js",[],"D:\\Playground\\React\\tic-tac-toe\\src\\components\\Square\\square.js",[],["25","26"],{"ruleId":"27","severity":1,"message":"28","line":2,"column":17,"nodeType":"29","messageId":"30","endLine":2,"endColumn":25},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-global-assign","no-unsafe-negation"]